.TH GRICLI 1 "July 1, 2011" "Gricli user manual"
.SH NAME
.PP
gricli - grid commandline interface
.SH SYNOPSIS
.PP
gricli [\f[I]options\f[]]
.SH DESCRIPTION
.PP
Gricli is a shell that allows commandline interaction with the grid.
You can use it to submit, control and monitor jobs.
It also supports easy access to grid-filesystems and resource
information.
.PP
Gricli is based on the \f[I]Grisu\f[] framework and can connect to
different \f[I]Grisu backends\f[] by selecting the appropriate one as a
commandline parameter, e.
g.:
.IP
.nf
\f[C]
gricli\ -b\ BeSTGRID
\f[]
.fi
.PP
or
.IP
.nf
\f[C]
gricli\ -b\ Local
\f[]
.fi
.PP
The above first would connect to the default \f[I]BeSTGRID\f[] backend
that publishes the \f[I]Grisu\f[] API via SOAP.
The latter would connect to a local \f[I]Grisu\f[] backend which sits on
the same computer as \f[I]gricli\f[], as long as the local backend jar
(http://code.ceres.auckland.ac.nz/downloads/local-backend.jar) is in the
classpath (either in the same folder as gricli or in
%$HOME/.grisu.beta/lib/).
.SH OPTIONS
.PP
-b \f[I]BACKEND\f[] or --backend=\f[I]BACKEND\f[]
.PP
The Grisu backend to connect to.
The default is \f[I]BeSTGRID\f[] and other possible backends are
\f[I]BeSTGRID-TEST\f[],\f[I]BeSTGRID-DEV\f[] and \f[I]Local\f[].
.PP
Examples:
.IP
.nf
\f[C]
gricli\ -b\ BeSTGRID
gricli\ --backend=BeSTGRID
\f[]
.fi
.PP
-f \f[I]SCRIPT\f[] or --file=\f[I]SCRIPT\f[]
.PP
Executes a gricli script.
.PP
Examples:
.IP
.nf
\f[C]
gricli\ -f\ myexp.gs
gricli\ --file=myexp.gs
\f[]
.fi
.PP
-n or --nologin
.PP
Disables login at gricli startup.
.PP
Example:
.IP
.nf
\f[C]
gricli\ -n
\f[]
.fi
.SH GLOBALS
.PP
Globals define the properties of a job.
.SS Overview
.PP
Globals are the properties for a job.
They let you determine how and where your job will be executed.
To see the list of globals use the command \[aq]print globals\[aq].
You may use the \[aq]set\[aq] command to set any of the global
properties.
To view an individual property use the command \[aq]print global \[aq].
.PP
To view information and examples on each global use the command
\[aq]help \[aq].
Note that you may use a plain text script to automate the task of
setting globals.
For more information see use the command \[aq]help run\[aq].
.PP
Example usage:
.PP
print globals print global memory set memory 1g help memory help global
memory
.SS List of globals:
.SS cpus
.PP
The number of CPUs to be used by a job.
.PP
To set the number of CPUs use the \[aq]set\[aq] command.
To view the number of CPUs used in a job use the command \[aq]print
global cpus\[aq].
After a job has been submitted you can check the CPUs used with the
command \[aq]print job cpus\[aq]
.PP
Example usage:
.IP
.nf
\f[C]
set\ cpus\ 10
print\ global\ cpus
print\ job\ myjob\ cpus
\f[]
.fi
.SS debug
.PP
Boolean to show debug output from exceptions.
.PP
This value can be set using the \[aq]set\[aq] command.
.PP
Example usage:
.IP
.nf
\f[C]
set\ debug\ true
set\ debug\ false
\f[]
.fi
.SS description
.PP
The description of a job.
.PP
To set the job description use the \[aq]set\[aq] command.
To view the description before the job has been submitted use the
command \[aq]print global description\[aq].
To view the description of a submitted job use the command \[aq]print
job description\[aq].
.PP
Example usage:
.IP
.nf
\f[C]
set\ description\ "my\ job\ description"
print\ global\ description
print\ job\ myjob\ description
\f[]
.fi
.SS dir
.PP
The job directory.
.PP
This is the directory the job will be downloaded to after a
\[aq]download\[aq] or \[aq]downloadclean\[aq] command if a target
directory is not specified.
.PP
It is also used as the starting point where relative paths are
applicable.
For example if a file is located at /home/myfolder/myfile and the dir
variable is /home then myfile can be attached with using the relative
path: attach myfolder/myfile
.PP
To set the dir use the \[aq]set\[aq] command or the \[aq]cd\[aq]
command.
To view the dir before a job has been submitted use the command
\[aq]print global dir\[aq].
To view the dir after a job as been submitted use the command \[aq]print
job jobDirectory\[aq].
.PP
Grid locations (starting with prefix grid://) are currently not
supported for this command.
.PP
Example usage:
.IP
.nf
\f[C]
set\ dir\ ~
set\ dir\ /home/myfolder
cd\ ~/myfolder
\f[]
.fi
.SS email
.PP
The email address to send notifications to.
.PP
Email notifications can be sent when a job has started and when it has
finished.
.PP
The email address can be set using the \[aq]set\[aq] command.
To view the email address of a job before submission use the command
\[aq]print global email\[aq].
To view the email address of a job after submission use the command
\[aq]print job email_address\[aq].
.PP
Example usage:
.IP
.nf
\f[C]
set\ email\ myemail\@myhost.x
print\ global\ email
\f[]
.fi
.SS email_on_finish
.PP
Boolean to send an email notification when a job has finished.
.PP
To set the variable use the \[aq]set\[aq] command.
To view the setting before submission use the command \[aq]print global
email_on_finish\[aq].
To view setting after submission use the command \[aq]print job
email_on_finish\[aq].
.PP
Example usage:
.IP
.nf
\f[C]
set\ email_on_finish\ true
set\ email_on_finish\ false
\f[]
.fi
.SS email_on_start
.PP
Boolean to send an email notification when a job has started executing.
.PP
To set the variable use the \[aq]set\[aq] command.
To view the setting before submission use the command \[aq]print global
email_on_start\[aq].
To view setting after submission use the command \[aq]print job
email_on_start\[aq].
.PP
Example usage:
.IP
.nf
\f[C]
set\ email_on_start\ true
set\ email_on_start\ false
\f[]
.fi
.SS env
.PP
The execution environment variables of a job.
.PP
To add an environment variable and value use the \[aq]add env \[aq]
command.
.PP
Note that you do not need \[aq]$\[aq] as part of the variable name.
.PP
To view the environment variables and their values before submission use
the command \[aq]print global env\[aq].
To view the environment variables after submission use the command
\[aq]print job env\[aq].
.PP
Example usage:
.IP
.nf
\f[C]
add\ env\ MY_VAR\ MY_VALUE
print\ global\ env
print\ job\ myjob\ env
\f[]
.fi
.PP
For MPI jobs using multiple hosts, the environment variables must be
explicitly exported using the -x option in mpirun e.g:
.IP
.nf
\f[C]
submit\ -x\ MY_VAR\ /home/me001/my_application\ arg0\ arg1
\f[]
.fi
.SS gdir
.PP
The grid directory.
.PP
This is for use with the filemanager command which has yet to be
implemented.
.SS group
.PP
The group used to send jobs.
.PP
The group determines which queues you will have access to and
consequently which application package you can use.
.PP
To set the group use the \[aq]set\[aq] command.
Note that the group must be set before a job can be submitted.
To view the group before a job has been submitted use the command
\[aq]print global group\[aq].
To view the group after a job has been submitted use the command
\[aq]print job group\[aq].
.PP
Example usage:
.IP
.nf
\f[C]
set\ group\ /nz/nesi
print\ global\ group
print\ job\ myjob\ group
\f[]
.fi
.SS hostcount
.PP
The number of compute hosts to be used
.PP
The hostcount is important for jobs where processes communicate across a
number of physical machines or hosts e.g.
MPI jobs.
Setting the hostcount will force the job to use the set number of hosts.
This can improve efficiency as the communications overhead is less
between processes running on the same host.
However the job may take longer to be dequeued as the requirements are
more restrictive.
.PP
The hostcount is unset by default and will not show in the list of
globals.
Once set, it will be visible in the list of globals.
Note that when setting the hostcount, you must use a positive integer.
To disable the hostcount restriction use the command \[aq]unset
hostcount\[aq].
.PP
Example usage:
.IP
.nf
\f[C]
set\ hostcount\ 2
unset\ hostcount
print\ global\ hostcount
print\ job\ myjob\ hostcount
\f[]
.fi
.SS jobname
.PP
The job name.
.PP
This will be the name of the submitted job.
If a job with this name already exists, an integer will be appended to
make sure it is unique.
.PP
To set the job name use the \[aq]set\[aq] command.
To view the job name before submission use the command \[aq]print global
jobname\[aq].
To view the job name after a job has been submitted use the command
\[aq]print jobs\[aq].
.PP
Example usage:
.IP
.nf
\f[C]
set\ jobname\ myjob
print\ global\ jobname
\f[]
.fi
.SS jobtype
.PP
The type of job to submit.
.PP
The job type determines how the job is configured for execution.
.PP
The current values are:
.IP
.nf
\f[C]
single\ :\ A\ job\ that\ will\ use\ one\ CPU\ on\ one\ host.
smp\ \ \ \ :\ A\ job\ that\ will\ use\ one\ or\ more\ CPUs\ on\ one\ host.
mpi\ \ \ \ :\ A\ job\ that\ will\ use\ one\ or\ more\ CPUs\ across\ one\ or\ more\ hosts\ using\ the\ Open\ MPI\ framework.
\f[]
.fi
.PP
Please note that a \[aq]host\[aq] is a compute node within a queue.
Since the hardware specifications may vary between hosts in a queue, you
are advised to check the properties of the queue to ensure you jobs run
correctly.
In particular, it is important that jobs do not request more resources
than are available for a given job type.
.PP
By default, an mpi job may schedule CPUs on any nodes in the queue.
You may use the hostcount global to force the CPUs to be scheduled on a
specific number of nodes.
To remove this restriction, use the unset command:
.IP
.nf
\f[C]
set\ hostcount\ 2
unset\ hostcount
\f[]
.fi
.PP
If you have set the hostcount, you can check the value using the command
\[aq]print global hostcount\[aq] and after submission using the command
\[aq]print job hostcount\[aq].
.PP
Example usage:
.IP
.nf
\f[C]
set\ jobtype\ mpi
print\ global\ jobtype
print\ job\ myjob\ hostcount
\f[]
.fi
.SS memory
.PP
The total memory (in MB) to be used by the job.
.PP
The value of this global represents the amount of physical memory (RAM)
to be allocated as well as the amount of virtual memory to be allocated.
This means that if you enter the following command:
.IP
.nf
\f[C]
set\ memory\ 1024
\f[]
.fi
.PP
Your job will have 1024 MB (or 1 GB) of RAM and 1 GB of virtual memory
.PP
The way memory is used depends on the jobtype.
.IP
.nf
\f[C]
single\ :\ All\ memory\ is\ used\ by\ one\ CPU.
smp\ \ \ \ :\ The\ memory\ is\ shared\ between\ one\ or\ more\ CPUs\ on\ a\ single\ host.
mpi\ \ \ \ :\ The\ memory\ is\ divided\ between\ the\ CPUs\ which\ may\ be\ on\ one\ or\ more\ hosts.
\f[]
.fi
.PP
To set the memory for the job, use the \[aq]set\[aq] command.
The command accepts values in the following formats:
.IP
.nf
\f[C]
set\ memory\ 200\ \ \ \ :\ sets\ memory\ to\ 200\ MB
set\ memory\ 200m\ \ \ :\ sets\ memory\ to\ 200\ MB
set\ memory\ 1g\ \ \ \ \ :\ sets\ memory\ to\ 1\ GB\ (1024\ MB)
set\ memory\ 1g200m\ :\ sets\ memory\ to\ 1224\ MB
\f[]
.fi
.PP
To view the memory of a job before submission use the command \[aq]print
global memory\[aq].
To view the memory of a job after submission use the command \[aq]print
job memory.
.PP
Please note that if you request more memory than is available for your
jobtype on a given queue, the job may stay on the queue because the
scheduler cannot find the appropriate resources to start the job.
.PP
Example usage:
.PP
set memory 1224 set memory 1g200m print global memory print job myjob
memory
.SS outputfile
.PP
The path to a file where command output is redirected to.
.PP
Some commands will print messages for the user.
This output can be redirected to a file for processing.
.PP
Note that this option does not redirect job output.
They will use the standard output files stdout.txt and stderr.txt You
can see the contents of these files using the \[aq]view\[aq] command
e.g:
.IP
.nf
\f[C]
view\ myjob\ stdout.txt
view\ myjob\ stderr.txt
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
set\ outputfile\ /home/myfolder/output.txt
\f[]
.fi
.SS package
.PP
This is the application package used by the job.
.PP
To set the package use the \[aq]set\[aq] command.
To see a list of available packages use the \[aq]print packages\[aq]
command.
.PP
To see which package is set for a job before it is submitted, use the
command \[aq]print global package\[aq].
After a job has been submitted you can check the package with \[aq]print
job package\[aq]
.PP
Note that the package is set to generic by default.
If you want the queue to be determined automatically, then it is best to
set the package to ensure that the selected queue can support your job.
Otherwise you would need to set the queue manually and check that it
supports the application run by your job.
If you would like to set the queue manually, use the command \[aq]print
package \[aq] to see the available queues for your application.
.PP
Example usage:
.IP
.nf
\f[C]
print\ package
set\ package\ R
print\ global\ package
print\ job\ myjob\ package
\f[]
.fi
.SS prompt
.PP
The prompt message.
.PP
This is can changed using the \[aq]set\[aq] command.
The command can accept macros, substituting the values of other globals
into the prompt.
.PP
Example usage:
.PP
set prompt "myprompt> " set prompt "${dir}> " set prompt "${jobname}> "
.SS queue
.PP
The job queue.
.PP
The job queue will determine which resources and application packages
are available for your job.
.PP
To set the queue use the \[aq]set\[aq] command.
To see a list of queues use the \[aq]print queues command\[aq].
.PP
You can only submit jobs to queues assigned to your group.
To view the available groups use the \[aq]print groups\[aq] command.
To view the queues available for a specific groups use the command
\[aq]print queues \[aq]
.PP
To see which queues support a particular application package use the
command \[aq]print package \[aq].
To see a list of application packages use the command \[aq]print
packages\[aq].
.PP
If you have set the application package, then the queue location can be
determined automatically.
Use the command \[aq]set queue auto\[aq] to enable this option.
.PP
To see the queue before a job is submitted use the command \[aq]print
global queue\[aq].
To see the queue after a job has been submitted use the command
\[aq]print job submissionLocation\[aq].
.PP
Example usage:
.IP
.nf
\f[C]
set\ queue\ auto
set\ queue\ gpu:gram5.ceres.auckland.ac.nz
print\ global\ queue
print\ job\ myjob\ submissionLocation
\f[]
.fi
.SS version
.PP
The application package version.
.PP
This is the application package version to be used.
By default the value is \[aq]any\[aq].
.PP
Note that this global is not visible under \[aq]print globals\[aq]
unless it has been set.
To unset the variable use the \[aq]unset\[aq] command
.PP
If a package is specified and the queue is set to auto, the job will be
submitted to a queue location that supports a version of the chosen
application package.
.PP
To ensure a specific version of the package is used, use the
\[aq]set\[aq] command to choose the version.
To see the list of versions available for an application package use the
command \[aq]print package \[aq].
.PP
Example usage:
.IP
.nf
\f[C]
set\ package\ R
set\ version\ any

set\ package\ R
set\ version\ \ 2.11.1

unset\ version
\f[]
.fi
.SS walltime
.PP
The walltime for the job measured in minutes.
.PP
The walltime determines the upper limit on how long a job will execute
for.
If a job has not finished after the allocated walltime, the job will be
killed.
.PP
Walltime can be set with strings as follows:
.PP
set walltime 120 : Sets the walltime for 2 hours set walltime 1d2h3m :
Sets the walltime for 1 day 2 hours and 3 minutes.
.PP
To view the walltime before a job has been submitted, use the command
\[aq]print global walltime\[aq].
To view the walltime after a job has been submitted, use the command
\[aq]print job walltime\[aq].
.PP
Example usage:
.IP
.nf
\f[C]
set\ walltime\ 240
set\ walltime\ 240m
set\ walltime\ 4h
set\ walltime\ 30d4h12m
print\ global\ walltime
print\ job\ myjob\ walltime
\f[]
.fi
.SH COMMANDS
.SS about
.PP
Displays the following information about the Gricli shell:
.PP
version: This is the software version you are using.
grisu frontend version: The interface used to communicate with Grisu.
grisu backend: The Grisu backend (BeSTGRID or DEV) grisu backend host:
The Grisu host.
grisu backend version: The version of Grisu used.
documentation: Where you may find further help and information.
contact: Who to contact in case you have problems or questions.
.PP
Example usage:
.IP
.nf
\f[C]
about
\f[]
.fi
.SS add
.PP
Adds an item to a list.
.PP
Currently only a single item can be added per call.
To add multiple items, use this command once for each item.
.PP
Parameters:
.IP
.nf
\f[C]
list\ :\ The\ name\ of\ the\ list.
item\ :\ The\ value\ to\ add.\ 
\f[]
.fi
.PP
Currently available lists are:
.IP
.nf
\f[C]
files\ :\ The\ files\ attached\ for\ a\ job.
env\ \ \ :\ The\ environment\ variables\ in\ the\ job\ execution\ environment
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
add\ files\ ~/myfile.txt
add\ files\ "~/my\ file.txt"
add\ files\ grid://groups/nz/nesi/myfile.txt
add\ env\ MY_VAR\ MY_VALUE
\f[]
.fi
.SS apropos
.PP
Lists help entries that are associated with a keyword.
.PP
The command displays the entry type (command, global or topic) and the
entry name.
To find out more use the \[aq]help\[aq] command on the command, global
or topic of interest.
.PP
Parameters:
.IP
.nf
\f[C]
keyword\ :\ The\ keyword\ to\ search\ for.
\f[]
.fi
.PP
Example usage
.IP
.nf
\f[C]
apropos\ queues
\f[]
.fi
.SS archive job
.PP
Downloads the job to the default archive location and then cleans the
job.
.PP
Supports glob regular expressions.
Note that if a job is still running it will be stopped.
The archive process may take a while depending on how large the files
are.
.PP
Jobs can also be archived asynchronously using \[aq]&\[aq] and the end
of the command.
This will complete the operation in the background and report back in
the prompt with a \[aq]*\[aq].
To view pending messages, use the \[aq]print messages\[aq] command.
.PP
Parameters:
.IP
.nf
\f[C]
jobname\ :\ The\ name\ of\ the\ job\ to\ archive.\ 
\f[]
.fi
.PP
The default archive location is in the user\[aq]s home directory on the
Data Fabric:
.IP
.nf
\f[C]
grid://groups/nz/nesi/archived-jobs/<jobname>
\f[]
.fi
.PP
You can also access the Data Fabric via your browser at the following
address:
.IP
.nf
\f[C]
http://df.bestgrid.org/
\f[]
.fi
.PP
Your files will be located in your Data Fabric home directory.
.PP
If the archiving was successful, the job will be deleted from the job
database and the original job directory will be deleted.
.PP
Example usage:
.IP
.nf
\f[C]
archive\ job\ myjob
archive\ job\ myjob_1
archive\ job\ myjob*
archive\ job\ myjob\ &
\f[]
.fi
.SS attach
.PP
Attaches a file to the file list of the current job.
.PP
Supports multiple arguments and glob regular expressions.
.PP
Parameters
.IP
.nf
\f[C]
files\ :\ Whitespace\ separated\ list\ of\ files
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
attach\ ~/myfile.txt
attach\ "~/my\ file.txt"
attach\ ~/myfile_1.txt\ ~/myfile_2.txt
attach\ ~/*.txt
\f[]
.fi
.SS batch add
.PP
Add a new command to a batch job container.
.PP
Parameters:
.IP
.nf
\f[C]
name\ \ \ \ :\ The\ name\ of\ the\ batchjob.
command\ :\ The\ new\ command\ string\ to\ add.
\f[]
.fi
.PP
Example usage:
.SS batch attach
.PP
Attach a list of files to a batchjob container
.PP
Supports multiple arguments and glob regular expressions.
.PP
Parameters
.IP
.nf
\f[C]
bactchjob\ :\ The\ name\ of\ the\ batchjob
files\ \ \ \ \ :\ Whitespace\ separated\ list\ of\ files
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
batch\ attach\ ~/myfile.txt
batch\ attach\ "~/my\ file.txt"
batch\ attach\ ~/myfile_1.txt\ ~/myfile_2.txt
batch\ attach\ ~/*.txt
batch\ attach\ grid://groups/nz/nesi/myfile.txt
\f[]
.fi
.SS batch create
.PP
Creates a new batch job object.
.PP
Batch job objects act as containers for jobs.
.PP
Parameters:
.IP
.nf
\f[C]
name\ :\ The\ name\ of\ the\ new\ batch\ job.\ 
\f[]
.fi
.PP
Please choose a meaningful name and make sure it is unique with respect
to other job names.
.PP
Example usage:
.IP
.nf
\f[C]
batch\ create\ mybatch
\f[]
.fi
.SS batch submit
.PP
Submits a batch job for execution.
.PP
The batch job should created beforehand using the \[aq]batch create\[aq]
command.
.PP
Parameters:
.IP
.nf
\f[C]
name\ :\ The\ name\ of\ the\ batch\ job\ to\ submit.
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
batch\ submit\ mybatch
\f[]
.fi
.SS cd
.PP
Changes the current job directory.
.PP
Can be used in conjunction with the \[aq]pwd\[aq] and \[aq]ls\[aq]
commands to explore the file system.
The command also sets the job global \[aq]dir\[aq] which determines
where relative paths start from.
.PP
Grid locations (starting with prefix grid://) are currently not
supported.
.PP
Parameters:
.IP
.nf
\f[C]
dir\ :\ The\ path\ to\ the\ new\ current\ directory.
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
cd\ /home/whoami/myfolder

attach\ ~/myfolder/myfile_1\ ~/myfolder/myfile_2
cd\ ~/myfolder
attach\ myfile_1\ myfile_2
\f[]
.fi
.SS clean job
.PP
Kills a job if it still running and then removes it from the job
database and deletes the job directory.
.PP
To clean all jobs use \[aq]clean job *\[aq].
.PP
Jobs can also be cleaned asynchronously using \[aq]&\[aq] and the end of
the command.
This will complete the operation in the background and report back in
the prompt with a \[aq]*\[aq].
To view pending messages, use the \[aq]print messages\[aq] command.
.PP
Parameters:
.IP
.nf
\f[C]
jobname\ :\ The\ name\ of\ the\ job\ to\ clean.\ Supports\ glob\ regular\ expressions.
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
clean\ job\ myjob
clean\ job\ myjob_1
clean\ job\ myjob_2
clean\ job\ myjob*
clean\ job\ *
clean\ job\ myjob\ &
\f[]
.fi
.SS close session
.PP
Deletes your login information.
.PP
You will have to enter your login information again on your next login.
.PP
This can be used if you would like to login with another profile.
.PP
Example usage:
.PP
close session
.SS downloadclean job
.PP
Downloads the job to the specified directory and cleans the job upon
success.
.PP
Parameters:
.IP
.nf
\f[C]
jobname\ \ \ \ :\ The\ name\ of\ the\ job\ to\ download\ and\ clean.
target_dir\ :\ The\ target\ dir\ to\ download\ the\ job\ directory\ to.
\f[]
.fi
.PP
The job directory includes all the job input and output files and will
be downloaded to the location specified in the global \[aq]dir\[aq] or
optionally, the \[aq]target_dir\[aq] which can be specified after the
\[aq]jobname\[aq].
The \[aq]target_dir\[aq] will be created if it does not exist.
.PP
If the download is not successful the job will not be cleaned.
.PP
Note that once a job has been cleaned it is no longer accessible via job
related commands.
.PP
Example usage:
.IP
.nf
\f[C]
downloadclean\ myjob
\f[]
.fi
.SS download job
.PP
Downloads the whole job directory to the specified locaiton.
.PP
The job directory which includes all the job input and output files will
be downloaded to the location specified in the global \[aq]dir\[aq] or
optionally, the \[aq]target_dir\[aq] which can be specified after the
\[aq]jobname\[aq].
.PP
If the \[aq]target_dir\[aq] does not exist, it will be created.
.PP
Parameters:
.IP
.nf
\f[C]
jobname\ \ \ \ :\ The\ name\ of\ the\ job\ to\ download.
target_dir\ :\ The\ target\ dir\ to\ download\ the\ job\ directory\ to.
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
download\ job\ myjob
download\ job\ myjob\ /some/dir
\f[]
.fi
.SS exec
.PP
Executes a command from the underlying shell.
.PP
Parameters:
.IP
.nf
\f[C]
command\ :\ The\ command\ to\ execute.\ 
\f[]
.fi
.PP
Please note that you can not use commands with remote files (yet).
.PP
Example usage:
.IP
.nf
\f[C]
exec\ ls\ -lah
exec\ javac\ -version
exec\ cat\ myscript.gs
\f[]
.fi
.SS exit
.PP
Logs out of the current session.
Alias for "quit" command.
.PP
If you use the Institutional Login option, your login information will
be vaild for 10 days.
You don\[aq]t need to provide your credentials again if you login before
then.
.PP
If you want to extend the time on your session use the \[aq]renew
session\[aq] command.
You will be asked for your credentials again and they will be vaild for
10 days.
.PP
Example usage:
.IP
.nf
\f[C]
exit
\f[]
.fi
.SS filemanager
.PP
Not yet implemented.
.SS help
.PP
The command syntax presented in the help files has the following format:
.IP
.nf
\f[C]
command_name\ <required_argument>\ [optional_argument]
\f[]
.fi
.PP
A command may have multiple required and optional arguments.
.PP
Prints this help message or a help message for a certain command, topic
or global variable.
.PP
Parameters:
.IP
.nf
\f[C]
keywords\ :\ A\ whitespace\ separated\ list\ of\ keywords.
\f[]
.fi
.PP
Usage:
.IP
.nf
\f[C]
help\ \ \ \ \ \ \ \ \ \ \ \ 

\ \ \ \ Prints\ this\ message.

help\ <keyword>\ \ \ \ \ \ 

\ \ \ \ Prints\ a\ help\ message\ for\ a\ command,\ topic\ or\ global\ variable\ with\ this\ exact\ name\ or,\ if\ no\ such\ command,\ topic
\ \ \ \ or\ global\ variable\ exists\ it\ lists\ all\ commands,\ topics\ or\ global\ variables\ that\ contain\ the\ keyword\ in\ the\ name
\ \ \ \ or\ help\ message.

help\ commands\ \ \ \ \ \ \ 

\ \ \ \ Lists\ all\ available\ commands.

help\ globals\ \ \ \ 

\ \ \ \ Lists\ all\ available\ globals.

help\ topics\ \ \ \ \ \ \ \ \ 

\ \ \ \ Lists\ all\ available\ topics.

help\ all\ \ \ \ \ \ \ \ \ \ \ \ 

\ \ \ \ Lists\ all\ available\ commands,\ globals\ and\ topics.

help\ command\ <command>\ \ 

\ \ \ \ Prints\ the\ help\ message\ for\ the\ specified\ command.

help\ global\ <global>\ \ \ \ 

\ \ \ \ Prints\ the\ help\ message\ for\ the\ specified\ global\ variable.

help\ topic\ <topic>\ \ \ \ \ \ 

\ \ \ \ Prints\ the\ help\ message\ for\ the\ specified\ topic.

help\ <keywords>\ \ \ \ \ 

\ \ \ \ Prints\ the\ help\ message\ for\ the\ command\ that\ is\ called\ by\ this\ combination\ of\ keywords\ (if\ it\ exists).

help\ search\ <keyword>\ \ \ 

\ \ \ Prints\ a\ list\ of\ all\ commands,\ topics\ or\ global\ variables\ that\ contain\ the\ keyword\ in\ the\ name\ or\ help\ message
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
help
help\ all

help\ commands
help\ command\ print\ jobs
help\ print\ jobs
help\ jobs

help\ globals
help\ global\ memory
help\ memory

help\ topics
help\ topic\ Jobs
help\ Jobs

help\ search\ batch
\f[]
.fi
.SS ilogin
.PP
Logs in to a Grisu backend.
.PP
Parameters:
.IP
.nf
\f[C]
backend\ :\ The\ Grisu\ backend.\ 
\f[]
.fi
.PP
The choice of backend is one of:
.IP
.nf
\f[C]
BeSTGRID\ :\ The\ default\ backend.
DEV\ \ \ \ \ \ :\ The\ development\ backend.\ \ \ \ \ 
\f[]
.fi
.PP
If there is no proxy certificate the user is asked to create one.
.PP
Example usage:
.IP
.nf
\f[C]
ilogin\ BeSTGRID
ilogin\ DEV\ 
\f[]
.fi
.SS kill job
.PP
Kills a job by stopping its execution.
.PP
This stops the remote execution of the job but leaves the job in the job
database and also leaves the job directory intact.
To delete the job directory you need to clean the job.
.PP
Note that a job cannot be resumed once it has been killed.
To kill all jobs use \[aq]kill job *\[aq].
.PP
Jobs can also be killed asynchronously using \[aq]&\[aq] and the end of
the command.
This will complete the operation in the background and report back in
the prompt with a \[aq]*\[aq].
To view pending messages, use the \[aq]print messages\[aq] command.
.PP
Parameters:
.IP
.nf
\f[C]
jobname\ :\ The\ name\ of\ the\ job\ to\ kill.\ Supports\ glob\ regular\ expressions.
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
kill\ job\ myjob
kill\ job\ myjob_1
kill\ job\ myjob_2
kill\ job\ myjob*
kill\ job\ *
kill\ job\ myjob\ &
\f[]
.fi
.SS login
.PP
Logs in to a Grisu backend with existing proxy certificate.
.PP
The command will report an error if there is no proxy certificate.
.IP
.nf
\f[C]
backend\ :\ The\ Grisu\ backend\ to\ login\ to.
\f[]
.fi
.PP
The choice of backend is one of:
.IP
.nf
\f[C]
BeSTGRID\ :\ The\ default\ backend.
DEV\ :\ The\ development\ backend.\ \ \ \ \ 
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
login\ BeSTGRID
login\ DEV\ 
\f[]
.fi
.SS ls
.PP
Lists a jobdirectory, the current directory or the directory/file that
is specified by the path.
.PP
If executed without parameters, this lists the current (local)
directory.
.PP
If executed with one parameter gricli checks whether the parameter is
the name of a currently active job.
If that\[aq]s the case, the jobdirectory of this job is listed,
otherwise the parameter is treated as url or path.
.PP
If executed with two parameters, the first parameter needs to be a
jobname of a currently active job and the 2nd parameter needs to be a
file in the jobdirectory of this job.
.PP
Parameters:
.IP
.nf
\f[C]
jobname_or_path\ :\ a\ jobname\ or\ a\ directory/file\ to\ list.\ (Optional)
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
ls
ls\ ~
ls\ job_name
ls\ jobname\ stdout.txt
ls\ /home/whoami
ls\ grid://groups/nz/nesi
ls\ grid://sites/Auckland/gram5.ceres.auckland.ac.nz/home/mbin029
\f[]
.fi
.SS print global
.PP
Prints the value of the specified global variable.
.IP
.nf
\f[C]
varname\ :\ The\ name\ of\ the\ global\ variable.
\f[]
.fi
.PP
Use \[aq]print globals\[aq] to see the list of global variables.
.PP
Example usage:
.IP
.nf
\f[C]
print\ global\ memory
print\ global\ walltime
print\ global\ cpus
\f[]
.fi
.SS print globals
.PP
Lists all global variables.
.PP
Global variables are use to define the properties of a job such as the
memory to be used and the associated input files.
.PP
Example usage:
.SS print groups
.PP
Lists all groups that are available to you.
.PP
Note that a group will determine which queues you may submit to.
Queues determine the physical and software resources available for a
job.
.PP
Example usage:
.IP
.nf
\f[C]
print\ groups
\f[]
.fi
.SS print hosts
.PP
Lists all submission gateways.
.PP
Example usage:
.SS print job
.PP
Prints either all or a specific property of a job.
.IP
.nf
\f[C]
jobname\ \ :\ The\ name\ of\ the\ job.\ Supports\ glob\ regular\ expressions.
property\ :\ The\ job\ property.\ (Optional)
\f[]
.fi
.PP
To see the available job properties use:
.IP
.nf
\f[C]
print\ job\ <jobname>
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
print\ job\ myjob
print\ job\ myjob\ memory
print\ job\ myjob\ jobDirectory
print\ job\ *\ jobDirectory
\f[]
.fi
.SS print jobs
.PP
Lists all jobs in the job database.
.PP
The job database will store information on jobs that are currently
running, finished or killed.
Once a job has been cleaned or archived, the job will be removed from
the database and can no longer be queried.
.PP
Example usage:
.IP
.nf
\f[C]
print\ jobs
\f[]
.fi
.SS print messages
.PP
Prints pending messages from asynchronous operations
.PP
Commands can be issued to run in the background using the ampersand
\[aq]&\[aq] e.g:
.IP
.nf
\f[C]
submit\ echo\ hello\ &
kill\ job\ myjob\ &
clean\ job\ myjob\ &
archive\ job\ myjob\ &
\f[]
.fi
.PP
The commands will then be executed asynchronously and when they have
completed an asterisk \[aq]*\[aq] will be shown in the shell prompt e.g:
.IP
.nf
\f[C]
jobs>\ submit\ echo\ hello\ &
...
(1*)\ jobs>\ 
\f[]
.fi
.PP
This command will show the messages produced by these background
opertations, informing you of their success or failure.
Once the messages have been printed, they are cleared from memory.
.PP
Example usage:
.IP
.nf
\f[C]
print\ messages
\f[]
.fi
.SS print package
.PP
Prints the available versions and queue locations for the specified
application package.
.PP
Parameters:
.IP
.nf
\f[C]
application_package\ :\ The\ application\ package.\ Supports\ glob\ regular\ expressions.
\f[]
.fi
.PP
To see a list of available applications use:
.IP
.nf
\f[C]
print\ packages
\f[]
.fi
.PP
Note that application packages are bound to queues so you must ensure
the queue you submit to can support the application you would like to
use.
This will be taken care of when you set the queue to \[aq]auto\[aq].
.PP
If you set the queue manually, use the this command to check that the
application and the version you would like to use is supported by the
queue.
.PP
Example usage:
.IP
.nf
\f[C]
print\ package\ R
print\ package\ BEAST
print\ package\ UnixCommands
print\ package\ *
print\ package\ B*
\f[]
.fi
.SS print packages
.PP
List all application packages available to you.
.PP
Note that application packages are bound to queues so you must ensure
the queue you submit to can support the package you would like to use.
This will be taken care of when you set the queue to \[aq]auto\[aq].
.PP
If you set the queue manually, use the \[aq]print package \[aq] command
to check that the application and the version you would like to use are
supported by the queue.
.PP
Example usage:
.IP
.nf
\f[C]
print\ packages
\f[]
.fi
.SS print queue
.PP
Displays all details about a queue.
.PP
Please be aware that the queue you are querying needs to be available
for your currently setup environment.
.PP
The current environment is the group you set, the application package
and version you choose (if any).
The order that these variables are set is important and they should be
set in the following order:
.IP
.nf
\f[C]
\ group
\ package\ (optional)
\ version\ (optional)
\f[]
.fi
.PP
Parameters:
.IP
.nf
\f[C]
queue:\ the\ name\ of\ the\ queue
\f[]
.fi
.PP
Fields:
.IP
.nf
\f[C]
Site\ \ \ \ \ \ \ \ \ :\ The\ location\ of\ the\ hosts\ represented\ by\ the\ queue.
Queue\ name\ \ \ :\ The\ name\ of\ the\ queue.
Job\ manager\ \ :\ The\ type\ of\ job\ scheduler\ used.
GRAM\ version\ :\ GRAM\ is\ a\ submission\ system.\ More\ recent\ versions\ provide\ better\ performance.

Total\ jobs\ \ \ :\ The\ total\ number\ of\ jobs\ in\ the\ queue.
Running\ jobs\ :\ The\ number\ of\ active\ jobs\ in\ the\ queue.
Waiting\ jobs\ :\ The\ number\ of\ jobs\ waiting\ to\ run.
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
print\ queue\ default:gram5.ceres.auckland.ac.nz
\f[]
.fi
.SS print queues
.PP
Lists all queues that are available for the current environment.
.PP
The current environment is the group you set, the application package
and version you choose (if any).
The order that these variables are set is important and they should be
set in the following order:
.IP
.nf
\f[C]
\ group
\ package\ (optional)
\ version\ (optional)
\f[]
.fi
.PP
Once the environment is defined, the print queues command will list the
available queues.
.PP
Parameters:
.IP
.nf
\f[C]
queue_properties\ :\ List\ of\ properties\ you\ want\ to\ have\ displayed\ per\ queue.\ (Optional)\ 
\f[]
.fi
.PP
Allowed values:
.IP
.nf
\f[C]
free_job_slots\ :\ The\ number\ of\ free\ CPUs\ on\ the\ queue.
gram_version\ \ \ :\ The\ job\ monitor\ version.
job_manager\ \ \ \ :\ The\ job\ scheduling\ framework.
queue_name\ \ \ \ \ :\ The\ name\ of\ the\ queue.
rank\ \ \ \ \ \ \ \ \ \ \ :\ The\ number\ of\ free\ CPUs\ on\ the\ queue.
running_jobs\ \ \ :\ The\ number\ of\ currently\ running\ jobs.
site\ \ \ \ \ \ \ \ \ \ \ :\ The\ institution\ managing\ the\ queue.
total_jobs\ \ \ \ \ :\ The\ total\ number\ of\ jobs,\ both\ running\ and\ queued.
waiting_jobs\ \ \ :\ The\ number\ of\ jobs\ that\ are\ waiting\ on\ the\ queue.
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
print\ queues\ 
print\ queues\ site
print\ queues\ site\ job_manager
\f[]
.fi
.SS pwd
.PP
Prints the current working directory.
.PP
Used in conjunction with \[aq]ls\[aq] and \[aq]cd\[aq] to navigate the
file system.
.PP
Example usage:
.IP
.nf
\f[C]
pwd
\f[]
.fi
.SS quit
.PP
Logs out of the current session.
.PP
If you use the Institutional Login option, your login information will
be vaild for 10 days.
You don\[aq]t need to provide your credentials again if you login before
then.
.PP
If you want to extend the time on your session use the \[aq]renew
session\[aq] command.
You will be asked for your credentials again and they will be vaild for
10 days.
.PP
Example usage:
.IP
.nf
\f[C]
quit
\f[]
.fi
.SS renew session
.PP
Renews the current session, and enable auto-renew.
.PP
This command may be useful when you have long running workflows and want
to avoid subsequent login steps.
Once the command has been issued, auto-renew will be enabled your
session will not expire while the submission shell is running.
.PP
You can check the status of the auto-renew option by using the
\[aq]about\[aq] command.
.PP
Example usage:
.IP
.nf
\f[C]
renew\ session
about
\f[]
.fi
.SS run
.PP
Runs a set of commands from a plain text file.
.PP
Using a script can automate common tasks such as configuring your job
environment or submitting a job.
.PP
Parameters:
.IP
.nf
\f[C]
script\ :\ The\ plain\ text\ file\ containing\ commands.
\f[]
.fi
.PP
A specific file extension (.txt, .xyz) is not required for the filename.
You may also use the \[aq]#\[aq] character to ignore lines in the
script.
.PP
Example script:
.SH Name: myscript
.SH Script to setup and run a job
.PP
set group /my/group set package UnixCommands set jobname myjob set
jobtype single set memory 1g set cpus 1 set walltime 10m set description
"a test job" submit echo Hello World
.PP
Example usage:
.IP
.nf
\f[C]
run\ myscript
run\ myscript.txt
run\ myscript.xyz
\f[]
.fi
.SS set
.PP
Sets a value for a variable.
.PP
Parameters:
.IP
.nf
\f[C]
var\ \ \ :\ The\ name\ of\ the\ variable.
value\ :\ The\ value.
\f[]
.fi
.PP
Currently only the global variables for a job (such as the amount of
memory to be used) can be set.
.PP
To the set the value of list-type variables such as \[aq]files\[aq] and
\[aq]env\[aq] use the \[aq]add\[aq] command.
See the help file for the \[aq]add\[aq] command for examples of setting
and unsetting lists.
.PP
Example usage:
.IP
.nf
\f[C]
set\ memory\ 1g
set\ set\ cpus\ 10
set\ walltime\ 3d
\f[]
.fi
.SS status
.PP
Displays a summary of current jobs.
.PP
Fields are defined as follows:
.IP
.nf
\f[C]
Active\ \ \ \ \ \ \ \ \ \ \ :\ The\ number\ of\ jobs\ that\ are\ running\ or\ waiting\ to\ run.
Finished\ \ \ \ \ \ \ \ \ :\ The\ number\ of\ jobs\ that\ have\ stopped\ running.\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\ Successful\ jobs\ finished\ within\ their\ walltime\ limit.
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ -\ Failed\ jobs\ were\ stopped\ for\ some\ reason.

Broken/Not\ found\ :\ These\ jobs\ have\ had\ an\ error\ before\ starting.
\f[]
.fi
.PP
To see which jobs have failed try looking at the output of the
stderr.txt file:
.IP
.nf
\f[C]
view\ myjob\ stderr.txt
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
status
\f[]
.fi
.SS submit
.PP
Submits a new job to execute a command
.PP
The job will be created and will wait on a queue until it is executed.
.PP
The job properties (such as associated files and memory) are set using
\[aq]global variables\[aq].
For more information on global varaibles type \[aq]help globals\[aq].
To learn more about jobs in general, see the help topic entry for Jobs:
\[aq]help topic Jobs\[aq].
.PP
Jobs can also be submitted asynchronously using \[aq]&\[aq] and the end
of the command.
This will complete the operation in the background and report back in
the prompt with a \[aq]*\[aq].
To view pending messages, use the \[aq]print messages\[aq] command.
.PP
Parameters:
.IP
.nf
\f[C]
command\ :\ The\ command\ to\ be\ executed.\ \ 
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
submit\ echo\ Hello\ World
submit\ sleep\ 100\ &
\f[]
.fi
.SS unset
.PP
Resets a list variable to its default value.
.IP
.nf
\f[C]
var\ :\ The\ name\ of\ the\ list\ variable.
\f[]
.fi
.PP
To add an item to a list use the \[aq]add \[aq] command.
.PP
Example usage:
.IP
.nf
\f[C]
unset\ files
unset\ env
\f[]
.fi
.SS user clearCache
.PP
Clears the file system cache.
.PP
You need to logout and login again to see the effects of this command.
.PP
Note: The next login will take longer than usual because the file system
cache is rebuilt at that stage.
.SS view
.PP
Prints the contents of a file.
.PP
Once a job is submitted, a job directory is created which contains all
the files associated with that job.
The view command will print the contents of a specified text file in
that job directory.
.PP
The command can also print the contents of a remote file without
reference to a jobname.
In this case, a full path name is required.
.PP
Note: Local file paths (e.g ~/myfile) are not currently supported.
To view a local file use the \[aq]exec\[aq] command e.g:
.IP
.nf
\f[C]
exec\ cat\ /my/local/file\ 
\f[]
.fi
.PP
Parameters:
.IP
.nf
\f[C]
jobname\ \ :\ The\ name\ of\ the\ job\ which\ the\ file\ is\ associated\ with.\ (Optional)
filename\ :\ The\ relative\ or\ full\ path\ of\ the\ file.
\f[]
.fi
.PP
Example usage:
.IP
.nf
\f[C]
view\ myjob\ stdout.txt
view\ myjob\ input/first.txt
view\ grid://groups/nz/nesi/myfile.xyz
view\ grid://jobs/myjob/myfile.xyz
view\ gsiftp://some.example.server/home/myfile.xyz
\f[]
.fi
.SS wait job
.PP
Waits for a job to finish.
.PP
This is useful in scripts where the execution will block until the job
has finished.
It allows for actions to be taken automatically when a job has finished
e.g:
.IP
.nf
\f[C]
set\ jobname\ myjob
submit\ echo\ Hello
wait\ job\ myjob
download\ job\ myjob
\f[]
.fi
.PP
Parameters:
.IP
.nf
\f[C]
jobname\ :\ The\ name\ of\ the\ job\ on\ which\ to\ wait.\ 
\f[]
.fi
.PP
Note: Regular expressions are not supported and only a single job can be
waited on.
.PP
Example usage:
.SH Files
.PP
The local and remote file resources used by jobs
.SS Overview
.PP
A job may request access to files, either as input or output parameters
or as executable binaries.
To reference a file, you may specify the full path or URL in your
application or you may simply \[aq]attach\[aq] the file to the job.
.SS Attaching Files
.PP
To attach a file use the \[aq]attach \[aq] command.
This will add the file to the global property \[aq]files\[aq].
The global \[aq]files\[aq] is a list of all additional files to be used
by the job.
An example of attaching a local file is shown below:
.IP
.nf
\f[C]
attach\ /path/to/my/local/file.txt
\f[]
.fi
.PP
The attached file will be uploaded to the job\[aq]s working directory.
This is a temporary directory that exists until the job is removed with
the \[aq]clean\[aq] command.
The advantage of attaching files to the job is that the application you
invoke may use a relative path to reference these files.
For example, if your program requires input files then you may reference
the file attached in the above example as follows:
.IP
.nf
\f[C]
submit\ myprogram\ --input\ file.txt
\f[]
.fi
.PP
Notice that now the file is in the working directory of the program and
we do not need to specify the full path to the original file.
.SS Removing Files
.PP
After a job has been submitted, the \[aq]files\[aq] global will remain
unchanged.
If you would like to clear the list of attached files use the command
\[aq]unset files\[aq].
This will set the list to empty.
.SS Shared Filesytems
.PP
On shared filesystems, you may safely avoid attaching files as all hosts
will be able to access your files.
The equivalent command in this case is:
.IP
.nf
\f[C]
submit\ myprogram\ --input\ /path/to/my/local/file.txt
\f[]
.fi
.PP
This will behave in the same way as attaching the file and using a local
reference (as shown above) except that some time is saved on file
transfers.
This becomes significant if you are dealing with large files.
.SS Remote Files
.PP
You may attach files from your cluster\[aq]s GridFTP server by using
\[aq]grid://\[aq] prefix:
.IP
.nf
\f[C]
attach\ grid://path/to/my/remote/file.txt
submit\ myprogram\ --input\ file.txt
\f[]
.fi
.PP
For other locations supporting GridFTP transfers use the gsiftp://
prefix :
.IP
.nf
\f[C]
attach\ gsiftp://path/to/my/remote/file.txt
submit\ myprogram\ --input\ file.txt
\f[]
.fi
.SS Listing Files
.PP
To see files in a directory use the \[aq]ls\[aq] command.
You can also navigate through a filesystem using the \[aq]cd\[aq]
(change directory) command.
If you need to know the directory you are currently in, use the
\[aq]pwd\[aq] (print working directory) command.
The \[aq]ls\[aq] command will show you files in either local or remote
locations:
.IP
.nf
\f[C]
ls\ /my/local/directory
ls\ grid://my/remote/directory
\f[]
.fi
.PP
Note that the TAB key can be used to suggest names and values at each
level in the file path.
This makes typing long paths much more convenient
.SS Viewing Files
.PP
Currently you may view local files using the command \[aq]exec cat
/path/to/local/file\[aq] .
To view remote files use the following command:
.IP
.nf
\f[C]
view\ grid://path/to/my/remote/file.txt
view\ gsiftp://path/to/my/remote/file.txt
\f[]
.fi
.PP
The \[aq]view\[aq] command also allows you view the contents of files in
the job directory:
.IP
.nf
\f[C]
view\ myjob\ myfile
\f[]
.fi
.PP
Note that this command will not work with jobs that have been cleaned.
.SS Further Information
.PP
For more information on any of the commands, globals or concepts
presented here, please make use of the \[aq]help\[aq] command.
.SH Jobs
.PP
An executable command and the environment properties.
.SS Overview
.PP
A job is the configuration for the program you would like to execute on
the cluster.
Job properties are set through \[aq]globals\[aq].
These allow you to set the application package and version to run as
well as the resources that the application needs such as the memory
(RAM) and the number of CPUs.
.PP
To see a list of available job properties use the command \[aq]print
globals\[aq].
To set a job property use the command \[aq]set \[aq].
To see the value for a specific job property use the command \[aq]print
global \[aq].
.SS Job Requirements
.PP
A typical job requires that that an application package be set and that
the version be specific or \[aq]any\[aq].
To view the available packages, use the command \[aq]print
packages\[aq].
.PP
Note that application packages are bound to specific queues and to use
applications in the package you must have access to the appropriate
queue.
To see the versions and queues for an application package use the
command \[aq]print package \[aq].
.PP
To set the queue, use the \[aq]set\[aq] command.
You can view all available queues with the \[aq]print queues\[aq]
command or you can filter by package using the command \[aq]print
package \[aq].
You may also filter by group using the command \[aq]print queues \[aq].
.PP
If you do not mind which queue your job is submitted to, you can use
\[aq]set queue auto\[aq] to let the system determine the appropriate
queue.
.PP
Note that regardless of your queue choice, you must choose a group.
You can view the available groups using the command \[aq]print
groups\[aq].
To set the group use the command \[aq]set group \[aq].
.PP
Job memory and CPU count will depend on your application.
By default a job has 2 GB of memory and 1 CPU.
This is the default configuration for a \[aq]single\[aq] jobtype.
To use multiple CPUs you will need to set the jobtype to \[aq]smp\[aq]
or \[aq]mpi\[aq] and increase the number of cpus.
For more information on these job types use the command \[aq]help
jobtype\[aq].
.PP
If your job requires any files to run you can use the \[aq]attach\[aq]
command to set them.
The files can include input files and compiled binaries.
They are stored as a list called \[aq]files\[aq].
Use \[aq]help attach\[aq] for more information on attaching files.
To view the files attached for a job, use the command \[aq]print global
files\[aq].
.PP
A job also requires that the walltime be set.
This is length of time in minutes that the job will run for.
For more information on walltimes use the command \[aq]help
walltime\[aq].
.PP
Finally a job must have a job name.
If you do not specify the job name, one is created for you.
Job names must be unique with respect to existing jobs.
If you submit two or more jobs with the same name, they will have a
number appended to distinguish them.
To set the job name use the command \[aq]set\[aq] command.
To view the job name use the command \[aq]print global jobname\[aq].
.SS Optional Properties
.PP
Jobs may have optional properties to inform you of changes or to help
manage your jobs.
You may request email notification when a job has started and when it
has finished.
Use the command \[aq]set email \[aq] to set the email address.
To receive emails you must set the globals \[aq]email_on_start\[aq] and
\[aq]email_on_finish\[aq].
These take the values \[aq]true\[aq] or \[aq]false\[aq].
.PP
Jobs may also have a description.
This helps identify the job after it has been submitted.
For more information, use the command \[aq]help description\[aq].
.PP
An output file may also be specified to redirect messages from the
submission shell to a file.
For more information see the help entry on \[aq]outputfile\[aq].
.PP
The \[aq]debug\[aq] property accepts a boolean (true or false) and will
display errors in full.
This is useful if you are having problems and you need to report an
error.
The contact details in this case can be found using the \[aq]about\[aq]
command.
.SS Job Submission
.PP
Once you have set the properties for a job you can submit using the
\[aq]submit\[aq] command.
The command takes a string in which is the command to be executed by the
remote hosts.
See \[aq]help submit\[aq] for more information.
.PP
While a job is running, a directory with the job name is created in your
home directory, under the directory \[aq]active-jobs\[aq]
(~/active-jobs).
The job directory is temporary and is removed when the job is cleaned.
.SS Checking Job Progress
.PP
You can check the details of your job using the \[aq]print job \[aq]
command.
To see the job status use the command \[aq]print job status\[aq].
If you do not know the name of your job, you can check all current jobs
using the command \[aq]print jobs\[aq].
See the associated help for each of these commands for more information.
.PP
To see the output of a job at any time, use the \[aq]view\[aq] command.
This will let you monitor your job progression if it is writing to
output files.
For examples, type \[aq]help view\[aq].
.SS Downloading Job Results
.PP
When a job is complete you can download the job directory using the
\[aq]download job [target_dir]\[aq] command.
The target dir is where the job will be downloaded to.
It is optional and by default with be downloaded to the current working
diretory as set in the global \[aq]dir\[aq].
To see the current working directory use the commands \[aq]pwd\[aq] or
\[aq]print global dir\[aq].
.PP
The job files can also be archived to your home directory on the Data
Fabric.
This will be grid://groups/nz/nesi You can do this using the
\[aq]archive job\[aq] command.
Note that this command cleans the job upon success.
.PP
When you are finished with a job you can use the \[aq]clean job\[aq]
command.
This will remove the job directory in ~/active-jobs and remove the job
entry from the job database.
.SS Stopping a Job
.PP
If you need to stop a job for any reason, use the \[aq]kill job\[aq]
command.
Note that once a job has been stopped it cannot be resumed.
.SS Example
.PP
Here is an example of how you can setup, submit and download a job:
.IP
.nf
\f[C]
>\ set\ group\ /nz/nesi
>\ print\ queues\ /nz/nesi
>\ set\ queue\ demo:gram5.ceres.auckland.ac.nz
>\ set\ package\ UnixCommands
>\ set\ jobtype\ single
>\ set\ cpus\ 1
>\ set\ memory\ 100
>\ set\ walltime\ 10
>\ set\ jobname\ echoJob
>\ set\ description\ "Job\ to\ test\ echo\ command"
>\ submit\ echo\ Hello\ World
>\ print\ job\ echoJob\ status
>\ download\ job\ echoJob
>\ clean\ job\ echoJob\ 
\f[]
.fi
.SS Further Information
.PP
For more information use the \[aq]help\[aq] command to learn more about
the commands, globals and topics mentioned here.
.PP
The Gricli source code and all documentation may be downloaded from
<http://github.com/grisu/gricli>.
.SH AUTHORS
Yuriy Halytskyy, Markus Binsteiner.
